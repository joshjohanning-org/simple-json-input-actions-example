name: trigger-workflow-and-wait

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      data: ${{ steps.json.outputs.data }}
    steps:
      - uses: actions/checkout@v4
      - name: Load json
        uses: actions/github-script@v7
        id: json
        with:
          script: |
            const fs = require('fs');
            let data = fs.readFileSync('.github/input.json', 'utf8');
            core.setOutput('data', data);
  build:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - run: echo "${{ needs.prepare.outputs.data }}" # works for raw json, could use jq
      - run: | 
          echo "${{ fromJson(needs.prepare.outputs.data)[0].workflow_payload.color }}"
          echo "${{ fromJson(needs.prepare.outputs.data)[0].workflow_payload.number }}"
          echo "${{ fromJson(needs.prepare.outputs.data)[0].workflow_payload.buildCmd }}"
          echo "${{ fromJson(needs.prepare.outputs.data)[0].workflow_payload.ref }}"

      - uses: actions/checkout@v4
        with:
          ref: ${{ fromJson(needs.prepare.outputs.data)[0].workflow_payload.ref }}

      - uses: joshjohanning-org/composite-action@main
        with:
          who-to-greet: ${{ fromJson(needs.prepare.outputs.data)[0].workflow_payload.color }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ prepare, build ]
    steps:
      - run: echo "${{ needs.prepare.outputs.data }}" # works for raw json, could use jq
      - run: | 
          echo "${{ fromJson(needs.prepare.outputs.data)[1].workflow_payload.color }}"
          echo "${{ fromJson(needs.prepare.outputs.data)[1].workflow_payload.number }}"
          echo "${{ fromJson(needs.prepare.outputs.data)[1].workflow_payload.skipIntTests }}"
          echo "${{ fromJson(needs.prepare.outputs.data)[1].workflow_payload.pods }}"
          echo "${{ fromJson(needs.prepare.outputs.data)[1].workflow_payload.ref }}"

  jq:
    runs-on: ubuntu-latest
    needs: [ prepare ]
    steps:
      - name: Option 1 - Parse JSON manually
        run: |
          DATA='${{ needs.prepare.outputs.data }}'
          DATA=$(echo "$DATA" | jq -r .)
          BUILD_PAYLOAD=$(echo "${DATA}" | jq -r '.[] | select(.workflow=="build") | .workflow_payload')
          DEPLOY_PAYLOAD=$(echo "${DATA}" | jq -r '.[] | select(.workflow=="deploy") | .workflow_payload')
          echo "Build color: $(echo $BUILD_PAYLOAD | jq -r '.color')"
          echo "Build number: $(echo $BUILD_PAYLOAD | jq -r '.number')"
          echo "Build cmd: $(echo $BUILD_PAYLOAD | jq -r '.buildCmd')"
          echo "Build ref: $(echo $BUILD_PAYLOAD | jq -r '.ref')"
          echo "Deploy color: $(echo $DEPLOY_PAYLOAD | jq -r '.color')"
          echo "Deploy number: $(echo $DEPLOY_PAYLOAD | jq -r '.number')"
          echo "Deploy skipIntTests: $(echo $DEPLOY_PAYLOAD | jq -r '.skipIntTests')"
          echo "Deploy pods: $(echo $DEPLOY_PAYLOAD | jq -r '.pods')"
          echo "Deploy ref: $(echo $DEPLOY_PAYLOAD | jq -r '.ref')"

      - name: Option 2 - programmatically create variable for each json object
        run: |
          DATA='${{ needs.prepare.outputs.data }}'
          DATA=$(echo "$DATA" | jq -r .)
          BUILD_PAYLOAD=$(echo "${DATA}" | jq -r '.[] | select(.workflow=="build") | .workflow_payload')
          DEPLOY_PAYLOAD=$(echo "${DATA}" | jq -r '.[] | select(.workflow=="deploy") | .workflow_payload')

          # I'm prefixing each key found here with "BUILD_" and "DEPLOY_", respectively, for easy reference when calling printenv
          for key in $(echo $BUILD_PAYLOAD | jq -r 'keys[]'); do
              value=$(echo $BUILD_PAYLOAD | jq -r --arg key $key '.[$key]')
              echo "Setting environment variable: BUILD_$key"
              echo "BUILD_$key=$value" >> $GITHUB_ENV
          done

          for key in $(echo $DEPLOY_PAYLOAD | jq -r 'keys[]'); do
              value=$(echo $DEPLOY_PAYLOAD | jq -r --arg key $key '.[$key]')
              echo "Setting environment variable: DEPLOY_$key"
              echo "DEPLOY_$key=$value" >> $GITHUB_ENV
          done

      - name: print build environment variables
        run: | 
          printenv | grep BUILD_

      - name: print deploy environment variables
        run: | 
          printenv | grep DEPLOY_

      - uses: actions/checkout@v4
        with:
          ref: ${{ env.BUILD_REF }}
